<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_MR1K1_BEND_BENDER" Id="{bb813b23-fc7f-4024-bdef-2b118b22f1e7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_MR1K1_BEND_BENDER
VAR
    // Encoder Arrays/RMS Watch:
    //MR1K1 US BENDER ENC RMS
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:US
    '}
    fbBendUSRMSErrorM1K1 : FB_RMSWatch;
    fMaxBendUSRMSErrorM1K1 : LREAL;
    fMinBendUSRMSErrorM1K1 : LREAL;
    //MR1K1 DS BENDER ENC RMS
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:DS
    '}
    fbBendDSRMSErrorM1K1 : FB_RMSWatch;
    fMaxBendDSRMSErrorM1K1 : LREAL;
    fMinBendDSRMSErrorM1K1 : LREAL;

    // Encoder Reference Values
    //MR1K1 BEND US ENC REF
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:US:REF
        field: EGU cnt
        io: i
    '}
    nEncRefBendUSM1K1 : UDINT;
    //MR1K1 BEND DS ENC REF
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:DS:REF
        field: EGU cnt
        io: i
    '}
    nEncRefBendDSM1K1 : UDINT;

    // Encoder raw counts
    //M1K1 BEND US ENC CNT
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:US:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntBendUSM1K1 : UDINT;
    //M1K1 BEND DS ENC CNT
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:DS:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntBendDSM1K1 : UDINT;
    //Emergency Stop for MR1K1
    //Emergency Stop for MR1K1
    {attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 5 (EK1122)^EK1100_MR1K1_BEND^EL1004_M1K1_BENDER_STO^Channel 1^Input'}
    M1K1BENDbSTOEnable1 AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 5 (EK1122)^EK1100_MR1K1_BEND^EL1004_M1K1_BENDER_STO^Channel 2^Input'}
    M1K1BENDbSTOEnable2 AT %I* : BOOL;

    // MR1K1 Bender RTDs
    // MR1K1 US RTDs
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:RTD:US:1
        field: ASLO 0.01
        field: EGU C
        io: i
    '}
    fM1K1US_RTD_1 : REAL;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:RTD:US:2
        field: ASLO 0.01
        field: EGU C
        io: i
    '}
    fM1K1US_RTD_2 : REAL;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:RTD:US:3
        field: ASLO 0.01
        field: EGU C
        io: i
    '}
    fM1K1US_RTD_3 : REAL;

    // M1K1 DS RTDs
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:RTD:DS:1
        field: ASLO 0.01
        field: EGU C
        io: i
    '}
    fM1K1DS_RTD_1 : REAL;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:RTD:DS:2
        field: ASLO 0.01
        field: EGU C
        io: i
    '}
    fM1K1DS_RTD_2 : REAL;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:RTD:DS:3
        field: ASLO 0.01
        field: EGU C
        io: i
    '}
    fM1K1DS_RTD_3 : REAL;

    // RTD error bit
    bM1K1US_RTD_1_Err AT %I*: BOOL;
    bM1K1US_RTD_2_Err AT %I*: BOOL;
    bM1K1US_RTD_3_Err AT %I*: BOOL;
    bM1K1DS_RTD_1_Err AT %I*: BOOL;
    bM1K1DS_RTD_2_Err AT %I*: BOOL;
    bM1K1DS_RTD_3_Err AT %I*: BOOL;

    // Logging
    fbLogHandler : FB_LogHandler;
    fbBendUSRMSErrorMR1K1: INT;

    // PMPS
    ffBenderRange : FB_FastFault := (
        i_xAutoReset := TRUE,
        i_DevName := 'MR1K1 Bender',
        i_Desc := 'Benders have moved out of range, monochromator beam may be focused where it can damage the BCS. Adjust bender to be within limits to clear fault',
        i_TypeCode := 16#402);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//FB_Motion stages for MR1K1 Benders
//MR1K1 BEND
fbMotionStage_m17(stMotionStage:=M17);
fbMotionStage_m18(stMotionStage:=M18);

// Calculate Pitch RMS Error for MR1K1 Benders:
//MR1K1 US BENDER ENC RMS
fbBendUSRMSErrorM1K1(stMotionStage:=M17,
                     fMaxRMSError=>fMaxBendUSRMSErrorM1K1,
                     fMinRMSError=>fMinBendUSRMSErrorM1K1);
//MR1K1 DS BENDER ENC RMS
fbBendDSRMSErrorM1K1(stMotionStage:=M18,
                     fMaxRMSError=>fMaxBendDSRMSErrorM1K1,
                     fMinRMSError=>fMinBendDSRMSErrorM1K1);


//STO for MR1K1 Benders
M17.bHardwareEnable := M1K1BENDbSTOEnable1 AND M1K1BENDbSTOEnable2;
M18.bHardwareEnable := M1K1BENDbSTOEnable1 AND M1K1BENDbSTOEnable2;

//Encoder reference positions for MR1K1
nEncRefBendUSM1K1  := ULINT_TO_UDINT(GVL_M1K1_BENDER_Constants.nM1K1bendUS_ENC_REF);
nEncRefBendDSM1K1  := ULINT_TO_UDINT(GVL_M1K1_BENDER_Constants.nM1K1bendDS_ENC_REF);

// M1K1 Bender Encoder Count Values For Epics
nEncCntBendUSM1K1  := ULINT_TO_UDINT(M17.nRawEncoderULINT);
nEncCntBendDSM1K1  := ULINT_TO_UDINT(M18.nRawEncoderULINT);

// MR1K1 Bender RTDs
fM1K1US_RTD_1 := INT_TO_REAL(GVL_M1K1_BENDER_RTD.nM1K1US_RTD_1);
fM1K1US_RTD_2 := INT_TO_REAL(GVL_M1K1_BENDER_RTD.nM1K1US_RTD_2);
fM1K1US_RTD_3 := INT_TO_REAL(GVL_M1K1_BENDER_RTD.nM1K1US_RTD_3);

fM1K1DS_RTD_1 := INT_TO_REAL(GVL_M1K1_BENDER_RTD.nM1K1DS_RTD_1);
fM1K1DS_RTD_2 := INT_TO_REAL(GVL_M1K1_BENDER_RTD.nM1K1DS_RTD_2);
fM1K1DS_RTD_3 := INT_TO_REAL(GVL_M1K1_BENDER_RTD.nM1K1DS_RTD_3);

// RTD not connected if T=0
bM1K1US_RTD_1_Err := fM1K1US_RTD_1 = 0;
bM1K1US_RTD_2_Err := fM1K1DS_RTD_2 = 0;
bM1K1US_RTD_3_Err := fM1K1US_RTD_3 = 0;
bM1K1DS_RTD_1_Err := fM1K1DS_RTD_1 = 0;
bM1K1DS_RTD_2_Err := fM1K1DS_RTD_2 = 0;
bM1K1DS_RTD_3_Err := fM1K1DS_RTD_3 = 0;


// M1K1 Bender RTD interlocks
M17.bHardwareEnable R= fM1K1US_RTD_1 > 10000 OR bM1K1US_RTD_1_Err;
M18.bHardwareEnable R= fM1K1DS_RTD_1 > 10000 OR bM1K1DS_RTD_1_Err;

ffBenderRange.i_xOK :=
    GVL_M1K1_BENDER_Constants.nM1K1bendUS_PMPS_LowerLimit < nEncCntBendUSM1K1 AND nEncCntBendUSM1K1 < GVL_M1K1_BENDER_Constants.nM1K1bendUS_PMPS_UpperLimit AND
    GVL_M1K1_BENDER_Constants.nM1K1bendDS_PMPS_LowerLimit < nEncCntBendDSM1K1 AND nEncCntBendDSM1K1 < GVL_M1K1_BENDER_Constants.nM1K1bendDS_PMPS_UpperLimit;
ffBenderRange(io_fbFFHWO := GVL_PMPS.fbFastFaultOutput1);

M17.bLimitForwardEnable := TRUE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>