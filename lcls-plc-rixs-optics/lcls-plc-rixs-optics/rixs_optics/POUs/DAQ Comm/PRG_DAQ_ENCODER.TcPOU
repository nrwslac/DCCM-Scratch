<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_DAQ_ENCODER" Id="{c31c4f90-877e-418a-91ce-5f5d622e7b14}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_DAQ_ENCODER
VAR
    // Inputs
    {attribute 'TcLinkTo' := 'TIIB[EVR]^Latch^LatchPos1'}
    iLatchPos AT %I*: ULINT;
    {attribute 'TcLinkTo' := 'TIIB[EVR]^Latch^LatchNeg1'}
    iLatchNeg AT %I*: ULINT;
    {attribute 'TcLinkTo' := 'TIIB[g_pi_up_dwn_e]^FB Inputs Channel 1^Position'}
    nEncoderCount AT %I*: ULINT;
    bSendToDAQ: BOOL := TRUE;
    bSendToTest: BOOL := FALSE;
    // rix-daq is the default test host
    sTestHost: STRING := '172.21.140.21';
    bUseHWTriggers: BOOL := TRUE;
    bUseSWTriggers: BOOL := FALSE;
    tSWTriggerDelay: TIME := T#8ms;

    // Outputs
    iTimeSincePos: ULINT;
    iMaxTime: ULINT;
    iMinTime: ULINT := 10000000000;
    fTimeInS: LREAL;
    iTriggerWidth: ULINT;
    {attribute 'pytmc' := '
        pv: SP1K1:MONO:DAQ:TRIG_RATE
        io: i
    '}
    fTriggerRate: LREAL;

    // Internals
    bNewTrigger: BOOL;
    tonSWTrigger: TON;
    iPrevLatchPos: ULINT;
    fMaxTimeInS: LREAL;
    fMinTimeInS: LREAL := 10000000;
    iTimeSinceLast: ULINT;
    nUpdateCycles: ULINT;
    {attribute 'pytmc' := '
        pv: SP1K1:MONO:DAQ:FRAME_COUNT
        io: i
    '}
    nFrameCount: UINT;
    stTaskInfo: PlcTaskSystemInfo;
    iUnderflowCount: ULINT;
    fUnderflowPercent: LREAL;
    fEncScale: LREAL;
    fEncScaleDenominator: LREAL;

    fbSocketHandler : FB_UDPSocketHandler;
    fbSocketSend : FB_BufferedSocketSend;
    fbSocketHandlerTest : FB_UDPSocketHandler;
    fbSocketSendTest : FB_BufferedSocketSend;
    payload : DUT_01_Channel_NW;
    fbHeader : FB_AssembleHeader := (sHardwareID := 'plc-tst-proto6');
    fbChannel : FB_AssembleChannel := (nChannel := 1);

    // Function blocks
    fbGetTaskIndex: GETCURTASKINDEX;

    // Temp testing
    nBusyCycles: UINT;
    nMaxBusyCycles: UINT;
    nDroppedFrames: UINT;

    // EPICS Diagnostics (reduce data size)
    {attribute 'pytmc' := '
        pv: SP1K1:MONO:DAQ:ENC_COUNT
        io: i
    '}
    fEpicsEncCount: DINT;
    {attribute 'pytmc' := '
        pv: SP1K1:MONO:DAQ:TRIG_WIDTH
        io: i
    '}
    fEpicsTrigWidth: DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF fEncScale = 0 THEN
    fEncScale := M7.stAxisParameters.fEncScaleFactorNumerator;
    fEncScaleDenominator := M7.stAxisParameters.fEncScaleFactorDenominator;
END_IF

fbGetTaskIndex();
stTaskInfo := _TaskInfo[fbGetTaskIndex.index];
IF bUseHWTriggers THEN
    bNewTrigger := iLatchPos <> iPrevLatchPos;
ELSIF bUseSWTriggers THEN
    tonSWTrigger(
        IN:=NOT tonSWTrigger.Q,
        PT:=tSWTriggerDelay,
        Q=>bNewTrigger,
    );
ELSE
    bNewTrigger := FALSE;
END_IF

IF bNewTrigger THEN
    // Core timing check
    nUpdateCycles := nUpdateCycles + 1;
    iTimeSincePos := LINT_TO_ULINT(stTaskInfo.DcTaskTime) - iLatchPos - (stTaskInfo.CycleTime * 100) + (stTaskInfo.LastExecTime * 100);
    IF iTimeSincePos > 9223372036854775800 THEN
        iTimeSincePos := 0;
        iUnderflowCount := iUnderflowCount + 1;
        IF nUpdateCycles > 0 THEN
            fUnderFlowPercent := 100 * ULINT_TO_LREAL(iUnderflowCount) / ULINT_TO_LREAL(nUpdateCycles);
        END_IF
    END_IF

    // Stats
    iMaxTime := MAX(iTimeSincePos, iMaxTime);
    iMinTime := MIN(iTimeSincePos, iMinTime);
    fTimeInS := ULINT_TO_LREAL(iTimeSincePos) / 1_000_000_000;
    fMinTimeInS := MIN(fTimeInS, fMinTimeInS);
    fMaxTimeInS := MAX(fTimeInS, fMaxTimeInS);
    iTimeSinceLast := iLatchPos - iPrevLatchPos;
    IF iTimeSinceLast > 0 THEN
        fTriggerRate := 1_000_000_000/ULINT_TO_LREAL(iTimeSinceLast);
    END_IF
    IF iLatchNeg > iLatchPos THEN
        iTriggerWidth := iLatchNeg - iLatchPos;
    END_IF

    // Assemble Packet
    nFrameCount := ULINT_TO_UINT(nUpdateCycles);
    fbHeader(
        nFrameCount := nFrameCount,
        sHardwareID := 'plc-rixs-optics',
        stHeader => payload.header
    );
    fbChannel(
        nEncCount := ULINT_TO_UDINT(nEncoderCount),
        nTiming := ULINT_TO_UDINT(iTimeSincePos),
        fScale := fEncScale,
        nError := UDINT_TO_USINT(M7.nErrorId),
        sHardwareID := 'SP1K1:G_PITCH',
        fScaleDenominator := fEncScaleDenominator,
        stChannel => payload.channel1
    );
    F_AddChannelToHeader(
        stHeader := payload.header,
        stChannel := payload.channel1,
    );

    // Make sure we don't send packets on the same trigger twice
    iPrevLatchPos := iLatchPos;
END_IF

// Create our sockets
// For the private DAQ network
fbSocketHandler(
    bEnable := TRUE,
    tRetry := T#30s,
    nLocalPort := 0,
    sLocalIP := '192.168.0.3'
);
// For the CDS network (testing)
fbSocketHandlerTest(
    bEnable := TRUE,
    tRetry := T#30s,
    nLocalPort := 0,
    sLocalIP := '172.21.140.71'
);

// Sent to the DAQ
fbSocketSend(
    stData := payload,
    bNewData := bSendToDAQ AND bNewTrigger,
    hSocket := fbSocketHandler.hSocket,
    sRemoteHost := '192.168.0.8',
    nRemotePort := 5006,
);

// Sent to test host (default: rix-daq)
fbSocketSendTest(
    stData := payload,
    bNewData := bSendToTest AND bNewTrigger,
    hSocket := fbSocketHandlerTest.hSocket,
    sRemoteHost := sTestHost,
    nRemotePort := 5006,
);

// Update EPICS-only vars
fEpicsEncCount := ULINT_TO_DINT(nEncoderCount);
fEpicsTrigWidth := ULINT_TO_DINT(iTriggerWidth);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>